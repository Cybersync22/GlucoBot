# -*- coding: utf-8 -*-
"""GlucoBot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R0AyxsrvKdWPcXdMn4qzV-LKOISJAj2t
"""

import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
import xgboost as xgb

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, auc, roc_curve
import joblib
import seaborn as sns
import matplotlib.pyplot as plt

#Loading the dataset
df = pd.read_csv("dataset_diabetes.csv")

np.random.seed(42)
df['Height'] = np.random.uniform(150, 180, size=len(df))

df['Weight'] = df['bmi'] * (df['Height'] / 100) ** 2

df.drop(columns=['bmi'], inplace=True)

df.drop(columns=['EmployeeName'], inplace=True)
df.drop(columns=['Patient_id'], inplace=True)

print("Final columns:", df.columns.tolist())
print(df.head())

label_encoders = {}

le_gender = LabelEncoder()
df['gender'] = le_gender.fit_transform(df['gender'])  # Female=0, Male=1
label_encoders['gender'] = le_gender

le_smoke = LabelEncoder()
df['smoking_history'] = le_smoke.fit_transform(df['smoking_history'])
label_encoders['smoking_history'] = le_smoke

X = df[['gender', 'age', 'Height', 'Weight', 'hypertension', 'heart_disease',
        'smoking_history', 'HbA1c_level', 'blood_glucose_level']]
y = df['diabetes']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scaling numeric features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = xgb.XGBClassifier(use_label_encoder=False, eval_metric='logloss')
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")

# Get predicted probabilities (for class 1)
y_proba = model.predict_proba(X_test)[:, 1]

# Calculate FPR, TPR
fpr, tpr, thresholds = roc_curve(y_test, y_proba)

# Calculate AUC score
roc_auc = auc(fpr, tpr)

# Plot ROC Curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'AUC = {roc_auc:.2f}')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')  # diagonal line
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve - Diabetes Prediction')
plt.legend(loc="lower right")
plt.grid()
plt.tight_layout()
plt.show()

# Confusion Matrix

c_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(c_matrix, annot = True, fmt= 'd', cmap= 'Reds')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

print(classification_report(y_test, y_pred))

# Feature Importance

feature_names = ['gender', 'age', 'Height', 'Weight', 'hypertension',
                 'heart_disease', 'smoking_history', 'HbA1c_level', 'blood_glucose_level']

booster = model.get_booster()
importance = booster.get_score(importance_type='weight')

importance_named = {feature_names[int(k[1:])]: v for k, v in importance.items()}

sorted_importance = dict(sorted(importance_named.items(), key=lambda item: item[1], reverse=True))

# Plot
plt.figure(figsize=(6, 4))
plt.barh(list(sorted_importance.keys()), list(sorted_importance.values()))
plt.xlabel("F score")
plt.title("Feature Importance")
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()

joblib.dump(model, 'xgb_diabetes_model.pkl')
joblib.dump(scaler, 'scaler.pkl')
joblib.dump(label_encoders, 'label_encoders.pkl')